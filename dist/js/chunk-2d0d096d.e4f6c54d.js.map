{"version":3,"sources":["webpack:///./src/utils/resumenLimpios.js","webpack:///./src/utils/resumenEmbarque2.js"],"names":["getClienteColor","clienteId","colores","generarResumenLimpios","productosPorCliente","clienteColors","escala","clientesPersonalizados","factorEscala","contenido","text","pageBreak","totalTarasGlobal","totalKilosGlobal","rectWidth","rectHeight","clientesPredefinidos","clientesExtra","Object","entries","forEach","productos","includes","push","i","length","columnas","j","nombreCliente","obtenerNombreCliente","tarasCliente","calcularTotalTaras","kilosCliente","calcularTotalKilos","stack","columns","width","canvas","type","x","y","w","h","r","color","fontSize","relativePosition","formatearKilos","style","alignment","margin","map","producto","generarTextoMedida","bold","x1","y1","x2","y2","lineWidth","lineColor","calcularTotalTarasSimple","calcularKilosProducto","generarTextoTarasYBolsas","columnGap","totalProductos","marginBottom","medidasPorFila","productosPorFila","slice","filaProductos","clienteIdStr","toString","Array","isArray","clienteEncontrado","find","cliente","_cliente$id","_cliente$clienteId","id","nombre","nombres","texto","tipo","textoAlternativo","medida","fecha","camaronNeto","noSumarKilos","tipoPersonalizado","precio","precioFormateado","Number","toLocaleString","totalBolsas","calcularTotalBolsas","kilosBrutos","kilos","reduce","sum","kilo","parseFloat","restarTaras","totalTaras","taras","tara","parseInt","reporteTaras","reporteBolsas","total","bolsa","tarasNormales","tarasExtra","minimumFractionDigits","maximumFractionDigits","detalles","tarasAcumuladas","bolsaActual","isNaN","join","pdfFonts","hasOwnProperty","pdfMake","vfs","default","console","error","fonts","Roboto","normal","italics","bolditalics","ordenMedidas","ordenarMedidas","medidas","sort","a","b","aUpper","toUpperCase","bUpper","indexA","findIndex","m","indexB","localeCompare","ordenarTaras","obtenerMedida","partes","split","tarasPorMedida","keys","resultado","concat","generarResumenEmbarquePDF","embarque","medidasCrudos","replace","trim","Set","log","docDefinition","pageSize","pageOrientation","content","table","widths","body","cargaCon","border","Date","getTime","toLocaleDateString","day","month","year","timeZone","styles","header","tableHeader","fillColor","clienteHeader","clienteCell","dataCell","tableHeaders","crudoConAlt","crudos","c","textoMostrado","tableData","clienteIds","nombreMostrado","clienteColor","row","crudosCliente","filter","todasLasTaras","crudo","tarasOrdenadas","headerRows","baseWidth","Math","min","layout","hLineWidth","node","vLineWidth","hLineColor","vLineColor","paddingLeft","paddingRight","paddingTop","paddingBottom","desgloseHeaders","desglosePorMedida","crudosDeMedida","primerCrudo","medidaMostrada","rowSpan","verticalAlignment","barco","defaultBorder","vLineAlignment","createPdf","download"],"mappings":"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","file":"js/chunk-2d0d096d.e4f6c54d.js","sourcesContent":["// Agregar esta función al inicio del archivo, antes de generarResumenLimpios\nfunction getClienteColor(clienteId) {\n  // Colores predefinidos para cada cliente\n  const colores = {\n    '1': '#3498db', // Joselito (azul)\n    '2': '#e74c3c', // Catarro (rojo)\n    '3': '#f1c40f', // Otilio (amarillo)\n    '4': '#2ecc71'  // Ozuna (verde)\n  };\n  return colores[clienteId] || '#95a5a6'; // Color gris por defecto\n}\n\nexport function generarResumenLimpios(productosPorCliente, clienteColors, escala = 100, clientesPersonalizados = []) {\n  const factorEscala = escala / 100;\n  const contenido = [\n    { text: '', pageBreak: 'before' }\n  ];\n\n  let totalTarasGlobal = 0;\n  let totalKilosGlobal = 0;\n\n  // Ajustar dimensiones base\n  const rectWidth = 120;\n  const rectHeight = 25;\n\n  // Separar clientes predefinidos de personalizados\n  const clientesPredefinidos = [];\n  const clientesExtra = [];\n\n  Object.entries(productosPorCliente).forEach(([clienteId, productos]) => {\n    // Verificar si es un cliente predefinido (1-4) o personalizado\n    if (['1', '2', '3', '4'].includes(clienteId)) {\n      clientesPredefinidos.push([clienteId, productos]);\n    } else {\n      clientesExtra.push([clienteId, productos]);\n    }\n  });\n\n  // Procesar clientes personalizados en tríos\n  for (let i = 0; i < clientesExtra.length; i += 3) {\n    const columnas = [];\n    \n    // Procesar hasta tres clientes por fila\n    for (let j = 0; j < 3 && (i + j) < clientesExtra.length; j++) {\n      const [clienteId, productos] = clientesExtra[i + j];\n      const nombreCliente = obtenerNombreCliente(clienteId, clientesPersonalizados);\n      const tarasCliente = calcularTotalTaras(productos);\n      const kilosCliente = calcularTotalKilos(productos);\n      totalTarasGlobal += tarasCliente;\n      totalKilosGlobal += kilosCliente;\n\n      columnas.push({\n        stack: [\n          // Header del cliente\n          {\n            columns: [\n              {\n                width: 'auto',\n                stack: [\n                  {\n                    canvas: [\n                      {\n                        type: 'rect',\n                        x: 0,\n                        y: 0,\n                        w: rectWidth * 0.8,\n                        h: rectHeight,\n                        r: 8,\n                        color: getClienteColor(clienteId)\n                      }\n                    ]\n                  },\n                  {\n                    text: nombreCliente,\n                    color: 'white',\n                    fontSize: 11 * factorEscala,\n                    relativePosition: { x: 10, y: -20 }\n                  }\n                ]\n              },\n              {\n                text: `${tarasCliente}T|${formatearKilos(kilosCliente)}Kg`,\n                style: 'total',\n                alignment: 'right',\n                color: getClienteColor(clienteId),\n                fontSize: 11 * factorEscala\n              }\n            ],\n            margin: [0, 3, 0, 3]\n          },\n          // Productos del cliente\n          ...productos.map(producto => ({\n            stack: [\n              {\n                text: generarTextoMedida(producto),\n                fontSize: 11 * factorEscala,\n                bold: true,\n                margin: [0, 0, 0, 1],\n                alignment: 'center'\n              },\n              {\n                canvas: [\n                  {\n                    type: 'line',\n                    x1: 0,\n                    y1: 1,\n                    x2: 120,\n                    y2: 1,\n                    lineWidth: 0.5,\n                    lineColor: '#000000'\n                  }\n                ],\n                margin: [0, 0, 0, 1]\n              },\n              {\n                text: calcularTotalTarasSimple(producto) === 0 ? \n                  [{ text: `${formatearKilos(calcularKilosProducto(producto))}`, color: 'red', bold: true }] :\n                  [\n                    { text: `${calcularTotalTarasSimple(producto)}-`, bold: true },\n                    { text: `${formatearKilos(calcularKilosProducto(producto))}`, color: 'red', bold: true }\n                  ],\n                fontSize: 11 * factorEscala,\n                margin: [0, 1, 0, 1],\n                alignment: 'center'\n              },\n              {\n                text: generarTextoTarasYBolsas(producto),\n                fontSize: 10 * factorEscala,\n                margin: [0, 0, 0, 1],\n                alignment: 'center'\n              }\n            ],\n            margin: [0, 0, 0, 5]\n          }))\n        ],\n        width: '32%'\n      });\n    }\n\n    // Agregar las columnas al contenido\n    contenido.push({\n      columns: columnas,\n      columnGap: 10,\n      margin: [0, 0, 0, 15]\n    });\n  }\n\n  // Procesar clientes predefinidos de manera vertical\n  clientesPredefinidos.forEach(([clienteId, productos]) => {\n    const nombreCliente = obtenerNombreCliente(clienteId, clientesPersonalizados);\n    const tarasCliente = calcularTotalTaras(productos);\n    const kilosCliente = calcularTotalKilos(productos);\n    \n    totalTarasGlobal += tarasCliente;\n    totalKilosGlobal += kilosCliente;\n\n    // Calcular el tamaño de fuente basado en la cantidad de productos\n    const totalProductos = productos.length;\n    let fontSize = 13;\n    let marginBottom = 15;\n    \n    if (totalProductos > 30) {\n      fontSize = 9;\n      marginBottom = 6;\n    } else if (totalProductos > 24) {\n      fontSize = 10;\n      marginBottom = 8;\n    } else if (totalProductos > 18) {\n      fontSize = 11;\n      marginBottom = 10;\n    } else if (totalProductos > 12) {\n      fontSize = 12;\n      marginBottom = 12;\n    }\n\n    // Header del cliente\n    contenido.push({\n      columns: [\n        {\n          width: 'auto',\n          stack: [\n            {\n              canvas: [\n                {\n                  type: 'rect',\n                  x: 0,\n                  y: 0,\n                  w: rectWidth,\n                  h: rectHeight,\n                  r: 8,\n                  color: getClienteColor(clienteId)\n                }\n              ]\n            },\n            {\n              text: nombreCliente,\n              color: 'white',\n              fontSize: fontSize * factorEscala,\n              relativePosition: { x: 10, y: -20 }\n            }\n          ]\n        },\n        {\n          text: `Total: ${tarasCliente}T | ${formatearKilos(kilosCliente)}Kg`,\n          style: 'total',\n          alignment: 'right',\n          color: getClienteColor(clienteId),\n          fontSize: fontSize * factorEscala\n        }\n      ],\n      margin: [0, 3, 0, 3]\n    });\n\n    // Calcular cuántas medidas por fila\n    let medidasPorFila = 3;\n    if (totalProductos > 30) {\n      medidasPorFila = 4;\n    }\n\n    // Agrupar productos en filas\n    const productosPorFila = [];\n    for (let i = 0; i < productos.length; i += medidasPorFila) {\n      productosPorFila.push(productos.slice(i, i + medidasPorFila));\n    }\n\n    // Generar filas de productos\n    productosPorFila.forEach(filaProductos => {\n      contenido.push({\n        columns: filaProductos.map(producto => ({\n          stack: [\n            {\n              text: generarTextoMedida(producto),\n              fontSize: fontSize * factorEscala,\n              bold: true,\n              margin: [0, 0, 0, 1],\n              alignment: 'center'\n            },\n            {\n              canvas: [\n                {\n                  type: 'line',\n                  x1: 0,\n                  y1: 1,\n                  x2: 150,\n                  y2: 1,\n                  lineWidth: 0.5,\n                  lineColor: '#000000'\n                }\n              ],\n              margin: [0, 0, 0, 1]\n            },\n            {\n              text: calcularTotalTarasSimple(producto) === 0 ? \n                [{ text: `${formatearKilos(calcularKilosProducto(producto))}`, color: 'red', bold: true }] :\n                [\n                  { text: `${calcularTotalTarasSimple(producto)}-`, bold: true },\n                  { text: `${formatearKilos(calcularKilosProducto(producto))}`, color: 'red', bold: true }\n                ],\n              fontSize: fontSize * factorEscala,\n              margin: [0, 1, 0, 1],\n              alignment: 'center'\n            },\n            {\n              text: generarTextoTarasYBolsas(producto),\n              fontSize: (fontSize - 1) * factorEscala,\n              margin: [0, 0, 0, 1],\n              alignment: 'center'\n            }\n          ],\n          width: `${100/medidasPorFila}%`,\n          alignment: 'center'\n        })),\n        columnGap: 5,\n        margin: [0, 0, 0, marginBottom]\n      });\n    });\n\n    // Separador entre clientes\n    contenido.push({\n      canvas: [\n        {\n          type: 'line',\n          x1: 0,\n          y1: 2,\n          x2: 515,\n          y2: 2,\n          lineWidth: 0.5,\n          lineColor: '#CCCCCC'\n        }\n      ],\n      margin: [0, 5, 0, 5]\n    });\n  });\n\n  return contenido;\n}\n\nfunction obtenerNombreCliente(clienteId, clientesPersonalizados = []) {\n  // Convertir clienteId a string para comparación consistente\n  const clienteIdStr = clienteId.toString();\n\n  // Si hay clientes personalizados, buscar primero en ellos\n  if (Array.isArray(clientesPersonalizados) && clientesPersonalizados.length > 0) {\n    const clienteEncontrado = clientesPersonalizados.find(cliente => \n      cliente.id?.toString() === clienteIdStr || \n      cliente.clienteId?.toString() === clienteIdStr\n    );\n\n    if (clienteEncontrado) {\n      return clienteEncontrado.nombre || clienteEncontrado.nombreCliente;\n    }\n  }\n\n  // Si no se encuentra en los personalizados, usar los nombres predefinidos\n  const nombres = {\n    '1': 'Joselito',\n    '2': 'Catarro',\n    '3': 'Otilio',\n    '4': 'Ozuna'\n  };\n\n  return nombres[clienteIdStr] || `Cliente ${clienteIdStr}`;\n}\n\n// Funciones auxiliares\nfunction generarTextoMedida(producto) {\n  let texto = '';\n  \n  // Si es tipo c/h20, crear un array con elementos coloreados\n  if (producto.tipo === 'c/h20') {\n    return [\n      { text: `${producto.textoAlternativo || producto.medida || ''} ${producto.fecha || ''} `, color: 'black' },\n      { text: `c/h20 (${producto.camaronNeto || 0.65})`, color: '#3498db' }\n    ];\n  }\n\n  // Para otros tipos, usar texto alternativo si existe\n  texto = producto.textoAlternativo || producto.medida || '';\n  \n  if (producto.fecha) {\n    texto += ` ${producto.fecha}`;\n  }\n\n  if (producto.clienteId === '3' && producto.noSumarKilos) {\n    texto += ' sellada';\n  }\n\n  if (producto.tipo === 'otro') {\n    texto += ` ${producto.tipoPersonalizado}`;\n  } else if (producto.tipo) {\n    texto += ` ${producto.tipo}`;\n  }\n\n  if (producto.precio) {\n    // Formatear el precio con separador de miles\n    const precioFormateado = Number(producto.precio).toLocaleString('en-US');\n    texto += ` $${precioFormateado}`;\n  }\n\n  return texto;\n}\n\nfunction calcularKilosProducto(producto) {\n  if (producto.tipo === 'c/h20') {\n    const camaronNeto = producto.camaronNeto || 0.65;\n    const totalBolsas = calcularTotalBolsas(producto);\n    return totalBolsas * camaronNeto;\n  }\n\n  // Para productos sin h20\n  const kilosBrutos = Array.isArray(producto.kilos) ? \n    producto.kilos.reduce((sum, kilo) => sum + (parseFloat(kilo) || 0), 0) : 0;\n\n  if (producto.restarTaras) {\n    const totalTaras = (Array.isArray(producto.taras) ? \n      producto.taras.reduce((sum, tara) => sum + (parseInt(tara) || 0), 0) : 0) * 3;\n    return kilosBrutos - totalTaras;\n  }\n  return kilosBrutos;\n}\n\nfunction calcularTotalBolsas(producto) {\n  if (!Array.isArray(producto.reporteTaras) || !Array.isArray(producto.reporteBolsas)) {\n    return 0;\n  }\n\n  let total = 0;\n  for (let i = 0; i < producto.reporteTaras.length; i++) {\n    const tara = parseInt(producto.reporteTaras[i]) || 0;\n    const bolsa = parseInt(producto.reporteBolsas[i]) || 0;\n    total += tara * bolsa;\n  }\n  return total;\n}\n\nfunction calcularTotalKilos(productos) {\n  return productos.reduce((total, producto) => {\n    if (producto.tipo === 'c/h20') {\n      // Para productos c/h20, usar el total de bolsas * valor neto\n      const totalBolsas = calcularTotalBolsas(producto);\n      return total + (totalBolsas * (producto.camaronNeto || 0.65));\n    } else {\n      // Para productos sin h20\n      const kilosBrutos = producto.kilos ? producto.kilos.reduce((sum, kilo) => sum + (parseFloat(kilo) || 0), 0) : 0;\n      const taras = producto.taras ? producto.taras.reduce((sum, tara) => sum + (parseInt(tara) || 0), 0) : 0;\n      \n      // Solo restar kilos por tara si restarTaras está activo\n      if (producto.restarTaras) {\n        return total + (kilosBrutos - (taras * 3));\n      }\n      return total + kilosBrutos;\n    }\n  }, 0);\n}\n\nfunction calcularTotalTaras(productos) {\n  return productos.reduce((total, producto) => {\n    // Sumar las taras del producto\n    const tarasNormales = producto.taras ? producto.taras.reduce((sum, tara) => sum + (parseInt(tara) || 0), 0) : 0;\n    const tarasExtra = producto.tarasExtra ? producto.tarasExtra.reduce((sum, tara) => sum + (parseInt(tara) || 0), 0) : 0;\n    return total + tarasNormales + tarasExtra;\n  }, 0);\n}\n\nfunction formatearKilos(kilos) {\n  // Formatear con separador de miles y un decimal\n  return kilos.toLocaleString('en-US', {\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 1\n  });\n}\n\nfunction generarTextoTarasYBolsas(producto) {\n  // Ya no mostramos el total de taras al inicio\n  let texto = '';\n\n  // Agregar el detalle de taras y bolsas\n  if (Array.isArray(producto.reporteTaras) && Array.isArray(producto.reporteBolsas)) {\n    const detalles = [];\n    let tarasAcumuladas = [];\n    let bolsaActual = null;\n    \n    // Procesar cada par de tara y bolsa\n    for (let i = 0; i < producto.reporteTaras.length; i++) {\n      const tara = parseInt(producto.reporteTaras[i]);\n      const bolsa = parseInt(producto.reporteBolsas[i]);\n      \n      if (!isNaN(tara) && !isNaN(bolsa)) {\n        if (bolsa === bolsaActual) {\n          tarasAcumuladas.push(tara);\n        } else {\n          if (tarasAcumuladas.length > 0) {\n            detalles.push(`(${tarasAcumuladas.join(',')}-${bolsaActual})`);\n          }\n          tarasAcumuladas = [tara];\n          bolsaActual = bolsa;\n        }\n      }\n    }\n    \n    // Agregar el último grupo\n    if (tarasAcumuladas.length > 0 && bolsaActual !== null) {\n      detalles.push(`(${tarasAcumuladas.join(',')}-${bolsaActual})`);\n    }\n\n    texto = detalles.join('');\n  }\n\n  return texto;\n}\n\nfunction calcularTotalTarasSimple(producto) {\n  // Sumar las taras del producto\n  const tarasNormales = producto.taras ? \n    producto.taras.reduce((sum, tara) => sum + (parseInt(tara) || 0), 0) : 0;\n  const tarasExtra = producto.tarasExtra ? \n    producto.tarasExtra.reduce((sum, tara) => sum + (parseInt(tara) || 0), 0) : 0;\n  return tarasNormales + tarasExtra;\n}\n","import pdfMake from 'pdfmake/build/pdfmake';\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\nimport { generarResumenLimpios } from './resumenLimpios';\n\n// Verificar y asignar vfs de manera segura\nif (typeof pdfFonts === 'object' && pdfFonts.hasOwnProperty('default')) {\n  pdfMake.vfs = pdfFonts.default;\n} else if (typeof pdfFonts === 'object' && pdfFonts.pdfMake && pdfFonts.pdfMake.vfs) {\n  pdfMake.vfs = pdfFonts.pdfMake.vfs;\n} else {\n  console.error('No se pudo inicializar vfs para pdfMake');\n}\n\npdfMake.fonts = {\n  Roboto: {\n    normal: 'Roboto-Regular.ttf',\n    bold: 'Roboto-Medium.ttf',\n    italics: 'Roboto-Italic.ttf',\n    bolditalics: 'Roboto-MediumItalic.ttf'\n  }\n};\n\n// Definir colores para cada cliente\nconst clienteColors = {\n  'Joselito': '#3498db',\n  'Catarro': '#e74c3c',\n  'Otilio': '#f1c40f',\n  'Ozuna': '#2ecc71'\n};\n\n// Definir el orden específico de las medidas\nconst ordenMedidas = [\n  'Med',\n  'Med-Esp',\n  'Med-Gde',\n  'Gde',\n  'Extra',\n  'Jumbo'\n];\n\n// Función auxiliar para ordenar medidas según el orden específico\nconst ordenarMedidas = (medidas) => {\n  return medidas.sort((a, b) => {\n    // Convertir a mayúsculas para la comparación\n    const aUpper = a.toUpperCase();\n    const bUpper = b.toUpperCase();\n    \n    const indexA = ordenMedidas.findIndex(m => m.toUpperCase() === aUpper);\n    const indexB = ordenMedidas.findIndex(m => m.toUpperCase() === bUpper);\n    \n    // Si ambas medidas están en la lista de orden específico\n    if (indexA !== -1 && indexB !== -1) {\n      return indexA - indexB;\n    }\n    // Si solo una medida está en la lista, ponerla primero\n    if (indexA !== -1) return -1;\n    if (indexB !== -1) return 1;\n    // Para medidas que no están en la lista, ordenar alfabéticamente\n    return a.localeCompare(b);\n  });\n};\n\n// Función auxiliar para ordenar taras\nconst ordenarTaras = (taras) => {\n  if (!Array.isArray(taras) || taras.length === 0) return [];\n\n  // Función para extraer la medida de una tara\n  const obtenerMedida = (tara) => {\n    if (typeof tara === 'string') {\n      const partes = tara.split('-');\n      return partes.length > 1 ? Number(partes[1]) : 0;\n    }\n    return 0;\n  };\n\n  // Agrupar por medida\n  const tarasPorMedida = {};\n  taras.forEach(tara => {\n    if (!tara) return; // Ignorar valores nulos o undefined\n    \n    const medida = obtenerMedida(tara);\n    if (!tarasPorMedida[medida]) {\n      tarasPorMedida[medida] = [];\n    }\n    tarasPorMedida[medida].push(tara);\n  });\n\n  // Ordenar las medidas (19 primero, luego el resto)\n  const medidas = Object.keys(tarasPorMedida)\n    .map(Number)\n    .sort((a, b) => {\n      if (a === 19) return -1;\n      if (b === 19) return 1;\n      return a - b;\n    });\n\n  // Construir el resultado final\n  return medidas.reduce((resultado, medida) => {\n    return resultado.concat(tarasPorMedida[medida]);\n  }, []);\n};\n\nexport const generarResumenEmbarquePDF = (embarque, productosPorCliente, obtenerNombreCliente, clientesPersonalizados = []) => {\n  // Obtener y ordenar las medidas de los crudos del embarque\n  let medidasCrudos = [];\n  if (embarque.medidasCrudos && Array.isArray(embarque.medidasCrudos)) {\n    medidasCrudos = embarque.medidasCrudos\n      .map(medida => medida.replace('c/c', '').trim());\n    \n    // Aplicar el ordenamiento específico\n    medidasCrudos = ordenarMedidas([...new Set(medidasCrudos)]);\n  }\n\n  console.log('Medidas de crudos encontradas:', medidasCrudos);\n\n  // Configuración de la página en tamaño carta vertical\n  const docDefinition = {\n    pageSize: 'LETTER',\n    pageOrientation: 'portrait',\n    content: [\n      {\n        table: {\n          widths: ['*', 'auto', '*'],\n          body: [\n            [\n              { text: `Carga: ${embarque.cargaCon}`, alignment: 'left', fontSize: 20, border: [false, false, false, true] },\n              { text: 'Embarque', alignment: 'center', fontSize: 25, bold: true, border: [false, false, false, true] },\n              { text: `${new Date(new Date(embarque.fecha).getTime() + 24 * 60 * 60 * 1000).toLocaleDateString('es-MX', {\n                day: '2-digit',\n                month: 'short',\n                year: 'numeric',\n                timeZone: 'America/Mexico_City'\n              })}`, alignment: 'right', fontSize: 20, border: [false, false, false, true] }\n            ]\n          ]\n        },\n        margin: [0, 0, 0, 20]\n      }\n    ],\n    styles: {\n      header: {\n        fontSize: 25,\n        bold: true,\n        alignment: 'center',\n        margin: [0, 0, 0, 0]\n      },\n      tableHeader: {\n        bold: true,\n        fontSize: 19,\n        fillColor: '#eeeeee',\n        alignment: 'center'\n      },\n      clienteHeader: {\n        fontSize: 18,\n        bold: true,\n        color: 'white',\n      },\n      clienteCell: {\n        bold: true,\n        fontSize: 17,\n        alignment: 'left',\n        color: 'white'\n      },\n      dataCell: {\n        fontSize: 19,\n        alignment: 'center'\n      },\n      total: {\n        fontSize: 18,\n        bold: true,\n        color: 'white'\n      }\n    }\n  };\n\n  // Crear encabezados de la tabla\n  const tableHeaders = [\n    { text: 'Cliente', style: 'tableHeader' },\n    ...medidasCrudos.map(medida => {\n      // Buscar si algún crudo con esta medida tiene textoAlternativo\n      const crudoConAlt = embarque.crudos.find(c => \n        c.medida.replace('c/c', '').trim() === medida && c.textoAlternativo\n      );\n      \n      // Usar el textoAlternativo si existe\n      const textoMostrado = crudoConAlt ? crudoConAlt.textoAlternativo : medida;\n      \n      return { text: textoMostrado, style: 'tableHeader' };\n    })\n  ];\n\n  // Preparar datos de la tabla\n  const tableData = [];\n  const clienteIds = new Set(embarque.crudos.map(c => c.clienteId));\n  \n  clienteIds.forEach(clienteId => {\n    const nombreCliente = obtenerNombreCliente(clienteId);\n    const nombreMostrado = nombreCliente === 'Joselito' ? '8A' : nombreCliente;\n    const clienteColor = clienteColors[nombreCliente] || '#95a5a6'; // Color gris por defecto\n    \n    const row = [{ \n      text: nombreMostrado, \n      style: 'clienteCell',\n      fillColor: clienteColor\n    }];\n    \n    // Llenar datos para cada medida\n    medidasCrudos.forEach(medida => {\n      const crudosCliente = embarque.crudos.filter(c => \n        c.clienteId === clienteId && \n        c.medida.replace('c/c', '').trim() === medida\n      );\n      \n      if (crudosCliente.length > 0) {\n        let todasLasTaras = [];\n        \n        crudosCliente.forEach(crudo => {\n          if (crudo.taras && Array.isArray(crudo.taras)) {\n            todasLasTaras = todasLasTaras.concat(crudo.taras.filter(tara => tara));\n          }\n        });\n        \n        const tarasOrdenadas = ordenarTaras(todasLasTaras);\n        \n        row.push({ \n          text: tarasOrdenadas.join('\\n'),\n          style: 'dataCell'\n        });\n      } else {\n        row.push({ text: '', style: 'dataCell' });\n      }\n    });\n    \n    tableData.push(row);\n  });\n\n  // Agregar la tabla al documento\n  docDefinition.content.push({\n    table: {\n      headerRows: 1,\n      widths: [60, ...medidasCrudos.map(() => {\n        const baseWidth = Math.min(100, (515 - 120) / medidasCrudos.length);\n        return baseWidth;\n      })],\n      body: [tableHeaders, ...tableData]\n    },\n    layout: {\n      hLineWidth: function(i, node) {\n        return 1;\n      },\n      vLineWidth: function(i, node) {\n        return 1;\n      },\n      hLineColor: function(i, node) {\n        return '#000000';\n      },\n      vLineColor: function(i, node) {\n        return '#000000';\n      },\n      paddingLeft: function(i) { return 4; },\n      paddingRight: function(i) { return 4; },\n      paddingTop: function(i) { return 4; },\n      paddingBottom: function(i) { return 4; }\n    }\n  });\n\n  // Agregar espacio después de la primera tabla\n  docDefinition.content.push(\n    { text: '\\n\\n' },\n    { text: 'Desglose por Medida', style: 'header', margin: [0, 0, 0, 10] }\n  );\n\n  // Crear tabla de desglose por medida\n  const desgloseHeaders = [\n    { text: 'Medida', style: 'tableHeader' },\n    { text: 'Cliente', style: 'tableHeader' },\n    { text: 'Barco', style: 'tableHeader' }\n  ];\n\n  const desglosePorMedida = [];\n  \n  // Organizar datos por medida\n  medidasCrudos.forEach(medida => {\n    const crudosDeMedida = embarque.crudos.filter(c => \n      c.medida.replace('c/c', '').trim() === medida\n    );\n\n    // Agregar la primera fila con la medida\n    if (crudosDeMedida.length > 0) {\n      const primerCrudo = crudosDeMedida[0];\n      const nombreCliente = obtenerNombreCliente(primerCrudo.clienteId);\n      const nombreMostrado = nombreCliente === 'Joselito' ? '8A' : nombreCliente;\n      \n      // Usar textoAlternativo si está disponible\n      const medidaMostrada = primerCrudo.textoAlternativo || medida;\n      \n      desglosePorMedida.push([\n        { \n          text: medidaMostrada, \n          style: 'dataCell', \n          rowSpan: crudosDeMedida.length,\n          alignment: 'center',\n          verticalAlignment: 'middle'\n        },\n        { \n          text: nombreMostrado, \n          style: 'clienteCell',\n          fillColor: clienteColors[nombreCliente] || '#95a5a6'\n        },\n        { text: primerCrudo.barco || '-', style: 'dataCell' }\n      ]);\n\n      // Agregar el resto de los crudos de la misma medida sin repetir la medida\n      for (let i = 1; i < crudosDeMedida.length; i++) {\n        const crudo = crudosDeMedida[i];\n        const nombreCliente = obtenerNombreCliente(crudo.clienteId);\n        const nombreMostrado = nombreCliente === 'Joselito' ? '8A' : nombreCliente;\n        \n        desglosePorMedida.push([\n          '', // Celda vacía porque está usando rowSpan\n          { \n            text: nombreMostrado, \n            style: 'clienteCell',\n            fillColor: clienteColors[nombreCliente] || '#95a5a6'\n          },\n          { text: crudo.barco || '-', style: 'dataCell' }\n        ]);\n      }\n    }\n  });\n\n  // Agregar tabla de desglose al documento\n  docDefinition.content.push({\n    table: {\n      headerRows: 1,\n      widths: ['*', 100, '*'],\n      body: [desgloseHeaders, ...desglosePorMedida]\n    },\n    layout: {\n      hLineWidth: function(i, node) { return 1; },\n      vLineWidth: function(i, node) { return 1; },\n      hLineColor: function(i, node) { return '#000000'; },\n      vLineColor: function(i, node) { return '#000000'; },\n      paddingLeft: function(i) { return 4; },\n      paddingRight: function(i) { return 4; },\n      paddingTop: function(i) { return 4; },\n      paddingBottom: function(i) { return 4; },\n      fillColor: function(i, node) {\n        return null;\n      },\n      defaultBorder: true,\n      vLineAlignment: function(i, node) { return 'center'; }\n    }\n  });\n\n  // Modificar el estilo de las celdas de medida\n  desglosePorMedida.forEach(row => {\n    if (row[0].text) {  // Solo para las celdas que tienen texto (no las vacías del rowSpan)\n      row[0] = {\n        ...row[0],\n        alignment: 'center',\n        margin: [0, 10, 0, 10],  // Agregar margen para mejor centrado vertical\n      };\n    }\n  });\n\n  // Agregar el contenido del resumen de productos limpios\n  docDefinition.content.push(\n    ...generarResumenLimpios(productosPorCliente, clienteColors, 100, clientesPersonalizados)\n  );\n\n  // Generar y descargar el PDF\n  pdfMake.createPdf(docDefinition).download('resumen-embarque-completo.pdf');\n};\n\n// Función auxiliar para calcular kilos\nconst calcularKilosProducto = (producto) => {\n  if (!producto.taras || producto.taras.length === 0) return 0;\n  return producto.taras.reduce((sum, tara) => sum + (tara || 0), 0);\n};\n"],"sourceRoot":""}